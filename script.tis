if (view.connectToInspector) { // for debugging with the Sciter inspector
   view.connectToInspector(rootElement, inspectorIpAddress);
}

function self.ready() {
  const w = self.intrinsicWidthMax();
  const h = self.intrinsicHeight(w);
  const (sw, sh) = view.screenBox(#frame, #dimension);
  view.move((sw / 2) - (w / 2), (sh / 2) - (h / 2), w, h, true);
  view.windowResizable = false;
}

let global_taking_screenshots = false;
let global_screenshot;
let global_last_result = "";
let global_screenshot_count = 0;

function saveImage(bytes, filename) {
  const path = "./unique_screenshots/" + filename;
  bytes.save(path);
}

function takeScreenshot() {
  if (global_taking_screenshots == false) return true;
  const screenshot = View.screenBox(0, #snapshot);

  let contains_red_pixel = false;

  const pixels = screenshot.toBytes(#bgra);
  const threshold_red = $(#input_red).value;
  const threshold_green = $(#input_green).value;
  const threshold_blue = $(#input_blue).value;

  const bytes = screenshot.toBytes();
  const screenshot_filename = "temp.png";
  saveImage(bytes, screenshot_filename);

  contains_red_pixel = view.find_red_pixel(
    "./unique_screenshots/" + screenshot_filename, 
    threshold_red, 
    threshold_green, 
    threshold_blue
  );

  if (contains_red_pixel == true) {
    stdout.println("contains red pixel");
    const bytes = screenshot.toBytes();
    const screenshot_filename = "screenshot" + global_screenshot_count + ".png";
    saveImage(bytes, screenshot_filename);
    global_last_result = result;
    global_screenshot_count++;
  } else {
    stdout.println("does not contain red pixel");
  }

  global_screenshot = screenshot;
  return true; // keep timer ticking
}

view.root.timer(1000ms, takeScreenshot); // take screenshot every 1 second